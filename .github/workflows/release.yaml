name: Build, Bump Version, and Release

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  actions: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Bump version in manifest.json and update versions.json
        id: bump_version
        run: |
          # Read the current version from manifest.json
          OLD_VERSION=$(jq -r '.version' manifest.json)
          echo "Current version: $OLD_VERSION"
          
          # Split the version and bump the patch number
          IFS='.' read -r MAJOR MINOR PATCH <<< "$OLD_VERSION"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "Bumping version to: $NEW_VERSION"
          
          # Update manifest.json with the new version
          jq --arg new_version "$NEW_VERSION" '.version = $new_version' manifest.json > manifest.tmp.json && mv manifest.tmp.json manifest.json
          
          # Update versions.json with the new version and same minAppVersion
          MIN_APP_VERSION=$(jq -r '.minAppVersion' manifest.json)
          echo "{\"$NEW_VERSION\": \"$MIN_APP_VERSION\"}" > versions.json
          
          # Configure Git and commit the changes on the current branch
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add manifest.json versions.json
          git commit -m "Bump version to $NEW_VERSION" || echo "No changes to commit"
          git push
          
          # Set the new version as an output for later steps
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          NEW_VERSION=${{ steps.bump_version.outputs.new_version }}
          git tag "$NEW_VERSION"
          git push origin "$NEW_VERSION"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.new_version }}
          release_name: "${{ steps.bump_version.outputs.new_version }}"
          body: "Automated release for version ${{ steps.bump_version.outputs.new_version }}"

      - name: Upload manifest.json to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./manifest.json
          asset_name: manifest.json
          asset_content_type: application/json

      - name: Upload main.js to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./main.js
          asset_name: main.js
          asset_content_type: application/javascript

      - name: Upload styles.css to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./styles.css
          asset_name: styles.css
          asset_content_type: text/css
